// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id  String @id @default(uuid())
  name  String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards  Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders  Order[] @relation("StoreToOrder")
}

model Billboard {
  id  String @id @default(uuid())
  label String
  imageUrl  String

  storeId  String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories  Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Category {
  id  String @id @default(uuid())
  name String
  storeId String
  billboardId String

  billboard Billboard @relation(fields: [billboardId], references: [id])
  store Store @relation("StoreToCategory", fields:[storeId], references: [id])
  category Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id  String @id @default(uuid())
  name    String
  value   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Color {
  id  String @id @default(uuid())
  name  String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Product {
  id  String @id @default(uuid())
  storeId String
  categoryId  String
  name  String
  price Decimal
  isFeatured  Boolean @default(false)
  isArchived  Boolean
  sizeId String
  colorId String
  
  color Color @relation(fields: [colorId], references: [id])
  size  Size @relation(fields: [sizeId], references: [id])
  store Store @relation("StoreToProduct",fields:[storeId],references:[id])
  category  Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  images Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt


  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id  String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id  String @id @default(uuid())
  storeId String
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id  String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}